<project xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://maven.apache.org/POM/4.0.0"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
    <modelVersion>4.0.0</modelVersion>
    <groupId>group.msg.at.cloud</groupId>
    <artifactId>cnj-tracing-backend-micro</artifactId>
    <version>${revision}${changelist}${sha1}</version>
    <packaging>war</packaging>
    <description>Cloud native Java backend using JPA for persistence based on Eclipse Microprofile</description>
    <properties>
        <!-- new Maven version management -->
        <revision>2.0.0</revision>
        <sha1></sha1>
        <changelist></changelist>
        <!-- common properties -->
        <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
        <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
        <!-- runtime related properties -->
        <java.version>11</java.version>
        <jakartaee.version>9.1.0</jakartaee.version>
        <payara.version>5.2022.1</payara.version>
        <payara.opentracing.jaeger.version>1.0.0</payara.opentracing.jaeger.version>
        <microprofile.version>4.1</microprofile.version>
        <!-- common logging dependencies -->
        <slf4j.version>1.7.32</slf4j.version>
        <!-- common rest dependencies -->
        <common.rest.version>0.8.0</common.rest.version>
        <!-- common test dependencies -->
        <junit.version>5.8.1</junit.version>
        <restassured.version>3.3.0</restassured.version>
        <cnj.common.test.version>3.0.1</cnj.common.test.version>
        <!-- common persistence dependencies -->
        <flyway.version>8.5.0</flyway.version>
        <postgres.jdbc.version>42.3.1</postgres.jdbc.version>
        <common.persistence.version>0.8.0</common.persistence.version>
        <!-- docker related properties -->
        <docker.registry.name>docker.cloudtrain.aws.msgoat.eu</docker.registry.name>
        <docker.organization.name>cloudtrain</docker.organization.name>
        <docker.image.name>${docker.registry.name}/${docker.organization.name}/${project.artifactId}</docker.image.name>
        <docker.removeMode>all</docker.removeMode>
        <docker.cleanup>try</docker.cleanup>
        <docker.verbose>true</docker.verbose>
        <docker.test.target.route>http://localhost:38080</docker.test.target.route>
        <!-- kubernetes related properties -->
        <k8s.cluster.route>https://apps.cloudtrain.aws.msgoat.eu</k8s.cluster.route>
        <k8s.cluster.namespace>default</k8s.cluster.namespace>
        <k8s.ingress.host>apps.cloudtrain.aws.msgoat.eu</k8s.ingress.host>
        <k8s.ingress.path>/${k8s.cluster.namespace}/${project.artifactId}</k8s.ingress.path>
        <k8s.test.target.route>${k8s.cluster.route}${k8s.ingress.path}</k8s.test.target.route>
        <!-- pinning versions of common maven plugins -->
        <maven.clean.plugin.version>3.1.0</maven.clean.plugin.version>
        <maven.compiler.plugin.version>3.8.1</maven.compiler.plugin.version>
        <maven.dependency.plugin.version>3.2.0</maven.dependency.plugin.version>
        <maven.deploy.plugin.version>3.0.0-M1</maven.deploy.plugin.version>
        <maven.enforcer.plugin.version>3.0.0</maven.enforcer.plugin.version>
        <maven.failsafe.plugin.version>3.0.0-M5</maven.failsafe.plugin.version>
        <maven.flatten.plugin.version>1.2.7</maven.flatten.plugin.version>
        <maven.install.plugin.version>3.0.0-M1</maven.install.plugin.version>
        <maven.jar.plugin.version>3.2.0</maven.jar.plugin.version>
        <maven.resources.plugin.version>3.2.0</maven.resources.plugin.version>
        <maven.site.plugin.version>3.9.1</maven.site.plugin.version>
        <maven.source.plugin.version>3.2.1</maven.source.plugin.version>
        <maven.surefire.plugin.version>3.0.0-M5</maven.surefire.plugin.version>
        <!-- pinning versions of application type specific maven plugins -->
        <maven.war.plugin.version>3.3.2</maven.war.plugin.version>
        <maven.payara.micro.plugin.version>1.4.0</maven.payara.micro.plugin.version>
        <!-- pinning versions of cloud native specific maven plugins -->
        <maven.compose.plugin.version>3.0.0</maven.compose.plugin.version>
        <maven.docker.plugin.version>0.37.0</maven.docker.plugin.version>
        <maven.helm.plugin.version>4.0.0</maven.helm.plugin.version>
        <!-- quality assurance properties -->
        <sonar.host.url>https://sonarqube.cloudtrain.aws.msgoat.eu</sonar.host.url>
        <maven.sonar.plugin.version>3.9.0.2155</maven.sonar.plugin.version>
        <maven.jacoco.plugin.version>0.8.7</maven.jacoco.plugin.version>
        <jacoco.address>localhost</jacoco.address>
        <jacoco.port>38089</jacoco.port>
    </properties>
    <dependencyManagement>
        <dependencies>
            <!-- JakartaEE 9 runtime dependencies -->
            <dependency>
                <groupId>jakarta.platform</groupId>
                <artifactId>jakarta.jakartaee-web-api</artifactId>
                <version>${jakartaee.version}</version>
                <scope>compile</scope>
            </dependency>
            <!-- Payara Micro Profile (to be used as test runtime only!) -->
            <dependency>
                <groupId>fish.payara.extras</groupId>
                <artifactId>payara-micro</artifactId>
                <version>${payara.version}</version>
                <scope>test</scope>
            </dependency>
            <!-- Eclipse MicroProfile runtime dependencies -->
            <dependency>
                <groupId>org.eclipse.microprofile</groupId>
                <artifactId>microprofile</artifactId>
                <version>${microprofile.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
            <!-- JUnit 5.x -->
            <dependency>
                <groupId>org.junit</groupId>
                <artifactId>junit-bom</artifactId>
                <version>${junit.version}</version>
                <type>pom</type>
                <scope>import</scope>
            </dependency>
        </dependencies>
    </dependencyManagement>
    <dependencies>
        <!-- =========================== -->
        <!-- execution time dependencies -->
        <!-- =========================== -->
        <!-- runtime environment dependencies -->
        <!-- JakartaEE 9 runtime dependencies -->
        <dependency>
            <groupId>jakarta.platform</groupId>
            <artifactId>jakarta.jakartaee-web-api</artifactId>
            <scope>provided</scope>
        </dependency>
        <!-- Microprofile runtime dependencies -->
        <dependency>
            <groupId>org.eclipse.microprofile.jwt</groupId>
            <artifactId>microprofile-jwt-auth-api</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.eclipse.microprofile.rest.client</groupId>
            <artifactId>microprofile-rest-client-api</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>org.eclipse.microprofile.openapi</groupId>
            <artifactId>microprofile-openapi-api</artifactId>
            <scope>provided</scope>
        </dependency>
        <!-- common dependencies section -->
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-api</artifactId>
            <version>${slf4j.version}</version>
        </dependency>
        <dependency>
            <groupId>org.slf4j</groupId>
            <artifactId>slf4j-jdk14</artifactId>
            <version>${slf4j.version}</version>
        </dependency>
        <dependency>
            <groupId>group.msg.at.cloud.common</groupId>
            <artifactId>cnj-common-rest-jakarta</artifactId>
            <version>0.1.0</version>
        </dependency>
        <dependency>
            <groupId>org.postgresql</groupId>
            <artifactId>postgresql</artifactId>
            <version>${postgres.jdbc.version}</version>
        </dependency>
        <dependency>
            <groupId>org.flywaydb</groupId>
            <artifactId>flyway-core</artifactId>
            <version>${flyway.version}</version>
        </dependency>
        <dependency>
            <groupId>group.msg.at.cloud.common</groupId>
            <artifactId>cnj-common-persistence-jakarta</artifactId>
            <version>${common.persistence.version}</version>
        </dependency>
        <dependency>
            <groupId>org.eclipse.microprofile.metrics</groupId>
            <artifactId>microprofile-metrics-api</artifactId>
            <scope>provided</scope>
        </dependency>
        <dependency>
            <groupId>group.msg.at.cloud.common</groupId>
            <artifactId>cnj-common-observability-jakarta</artifactId>
            <version>0.1.0</version>
        </dependency>
        <!-- showcase specific section -->
        <dependency>
            <groupId>org.eclipse.microprofile.opentracing</groupId>
            <artifactId>microprofile-opentracing-api</artifactId>
            <scope>provided</scope>
        </dependency>
        <!-- =========================== -->
        <!-- test time dependencies      -->
        <!-- =========================== -->
        <dependency>
            <groupId>fish.payara.extras</groupId>
            <artifactId>payara-micro</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-api</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-params</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-engine</artifactId>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>io.rest-assured</groupId>
            <artifactId>rest-assured</artifactId>
            <version>${restassured.version}</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>group.msg.at.cloud.common</groupId>
            <artifactId>cnj-common-test-core</artifactId>
            <version>0.9.0</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>group.msg.at.cloud.common</groupId>
            <artifactId>cnj-common-test-jakarta</artifactId>
            <version>0.1.0</version>
            <scope>test</scope>
        </dependency>
        <dependency>
            <groupId>org.apache.logging.log4j</groupId>
            <artifactId>log4j-slf4j-impl</artifactId>
            <version>2.17.0</version>
            <scope>test</scope>
        </dependency>
    </dependencies>
    <build>
        <pluginManagement>
            <plugins>
                <!-- common maven plugins section -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-clean-plugin</artifactId>
                    <version>${maven.clean.plugin.version}</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-compiler-plugin</artifactId>
                    <version>${maven.compiler.plugin.version}</version>
                    <configuration>
                        <source>${java.version}</source>
                        <target>${java.version}</target>
                        <parameters>true</parameters>
                    </configuration>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-dependency-plugin</artifactId>
                    <version>${maven.dependency.plugin.version}</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-deploy-plugin</artifactId>
                    <version>${maven.deploy.plugin.version}</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-enforcer-plugin</artifactId>
                    <version>${maven.enforcer.plugin.version}</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-failsafe-plugin</artifactId>
                    <version>${maven.failsafe.plugin.version}</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-install-plugin</artifactId>
                    <version>${maven.install.plugin.version}</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-resources-plugin</artifactId>
                    <version>${maven.resources.plugin.version}</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-site-plugin</artifactId>
                    <version>${maven.site.plugin.version}</version>
                </plugin>
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-surefire-plugin</artifactId>
                    <version>${maven.surefire.plugin.version}</version>
                </plugin>
                <plugin>
                    <groupId>org.codehaus.mojo</groupId>
                    <artifactId>flatten-maven-plugin</artifactId>
                    <version>${maven.flatten.plugin.version}</version>
                </plugin>
                <!-- quality assurance plugins -->
                <plugin>
                    <groupId>org.jacoco</groupId>
                    <artifactId>jacoco-maven-plugin</artifactId>
                    <version>${maven.jacoco.plugin.version}</version>
                </plugin>
                <plugin>
                    <groupId>org.sonarsource.scanner.maven</groupId>
                    <artifactId>sonar-maven-plugin</artifactId>
                    <version>${maven.sonar.plugin.version}</version>
                </plugin>
                <!-- application type specific maven plugins section -->
                <plugin>
                    <groupId>org.apache.maven.plugins</groupId>
                    <artifactId>maven-war-plugin</artifactId>
                    <version>${maven.war.plugin.version}</version>
                    <configuration>
                        <failOnMissingWebXml>false</failOnMissingWebXml>
                    </configuration>
                </plugin>
                <plugin>
                    <groupId>fish.payara.maven.plugins</groupId>
                    <artifactId>payara-micro-maven-plugin</artifactId>
                    <version>${maven.payara.micro.plugin.version}</version>
                </plugin>
                <!-- cloud native specific maven plugins section -->
                <plugin>
                    <groupId>io.fabric8</groupId>
                    <artifactId>docker-maven-plugin</artifactId>
                    <version>${maven.docker.plugin.version}</version>
                </plugin>
                <plugin>
                    <groupId>group.msg.at.cloud.tools</groupId>
                    <artifactId>compose-maven-plugin</artifactId>
                    <version>${maven.compose.plugin.version}</version>
                </plugin>
                <plugin>
                    <groupId>group.msg.at.cloud.tools</groupId>
                    <artifactId>helm-maven-plugin</artifactId>
                    <version>${maven.helm.plugin.version}</version>
                </plugin>
            </plugins>
        </pluginManagement>
        <plugins>
            <plugin>
                <groupId>org.apache.maven.plugins</groupId>
                <artifactId>maven-enforcer-plugin</artifactId>
                <executions>
                    <execution>
                        <id>enforce-versions</id>
                        <goals>
                            <goal>enforce</goal>
                        </goals>
                        <configuration>
                            <rules>
                                <requireMavenVersion>
                                    <version>[3.5,)</version>
                                </requireMavenVersion>
                                <requireJavaVersion>
                                    <version>${java.version}</version>
                                </requireJavaVersion>
                            </rules>
                        </configuration>
                    </execution>
                </executions>
            </plugin>
            <plugin>
                <groupId>org.codehaus.mojo</groupId>
                <artifactId>flatten-maven-plugin</artifactId>
                <configuration>
                    <updatePomFile>true</updatePomFile>
                    <flattenMode>resolveCiFriendliesOnly</flattenMode>
                </configuration>
                <executions>
                    <execution>
                        <id>flatten</id>
                        <phase>process-resources</phase>
                        <goals>
                            <goal>flatten</goal>
                        </goals>
                    </execution>
                    <execution>
                        <id>flatten.clean</id>
                        <phase>clean</phase>
                        <goals>
                            <goal>clean</goal>
                        </goals>
                    </execution>
                </executions>
            </plugin>
        </plugins>
    </build>
    <profiles>
        <!-- profile local-stage -->
        <!-- supposed to be run during local development -->
        <!-- builds application and runs it -->
        <profile>
            <id>local-stage</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-surefire-plugin</artifactId>
                        <configuration>
                            <excludes>
                                <exclude>**/*SystemTest.java</exclude>
                            </excludes>
                        </configuration>
                    </plugin>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-dependency-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>copy-payara-custom-libs</id>
                                <goals>
                                    <goal>copy</goal>
                                </goals>
                                <phase>prepare-package</phase>
                                <configuration>
                                    <artifactItems>
                                        <artifactItem>
                                            <groupId>group.msg.at.cloud</groupId>
                                            <artifactId>cnj-payara-opentracing-jaeger</artifactId>
                                            <version>${payara.opentracing.jaeger.version}</version>
                                        </artifactItem>
                                    </artifactItems>
                                    <stripClassifier>true</stripClassifier>
                                    <stripVersion>true</stripVersion>
                                    <outputDirectory>${project.build.directory}/payara/lib</outputDirectory>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <groupId>fish.payara.maven.plugins</groupId>
                        <artifactId>payara-micro-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>package uber JAR</id>
                                <goals>
                                    <goal>bundle</goal>
                                </goals>
                                <phase>package</phase>
                            </execution>
                            <execution>
                                <id>run uber JAR</id>
                                <goals>
                                    <goal>start</goal>
                                </goals>
                                <phase>pre-integration-test</phase>
                            </execution>
                        </executions>
                        <configuration>
                            <payaraVersion>${payara.version}</payaraVersion>
                            <useUberJar>true</useUberJar>
                            <commandLineOptions>
                                <option>
                                    <key>--disablephonehome</key>
                                    <value></value>
                                </option>
                                <option>
                                    <key>--enablehealthcheck</key>
                                    <value>true</value>
                                </option>
                                <option>
                                    <key>--nocluster</key>
                                    <value></value>
                                </option>
                                <option>
                                    <key>--nohostaware</key>
                                    <value></value>
                                </option>
                                <!-- explicitly adding the Jaeger OpenTracing library; embedding in Uber JAR does not work! -->
                                <option>
                                    <key>--addlibs</key>
                                    <value>${project.build.directory}/payara/lib/cnj-payara-opentracing-jaeger.jar</value>
                                </option>
                            </commandLineOptions>
                        </configuration>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <!-- profile pre-commit-stage representing pre-commit-stage of local build -->
        <!-- supposed to be run before each push to the central GIT repository -->
        <!-- builds application; runs unit tests on application; builds docker image; runs system tests on docker container -->
        <profile>
            <id>pre-commit-stage</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-surefire-plugin</artifactId>
                        <configuration>
                            <excludes>
                                <exclude>**/*SystemTest.java</exclude>
                            </excludes>
                        </configuration>
                    </plugin>
                    <plugin>
                        <groupId>fish.payara.maven.plugins</groupId>
                        <artifactId>payara-micro-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <goals>
                                    <goal>bundle</goal>
                                </goals>
                                <phase>package</phase>
                            </execution>
                        </executions>
                        <configuration>
                            <payaraVersion>${payara.version}</payaraVersion>
                        </configuration>
                    </plugin>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-resources-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>copy-docker-resources</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>copy-resources</goal>
                                </goals>
                                <configuration>
                                    <resources>
                                        <resource>
                                            <directory>${project.basedir}/src/main/docker</directory>
                                            <filtering>true</filtering>
                                        </resource>
                                        <resource>
                                            <directory>${project.build.directory}</directory>
                                            <includes>
                                                <include>*-microbundle.jar</include>
                                            </includes>
                                        </resource>
                                    </resources>
                                    <outputDirectory>${project.build.directory}/docker-resources</outputDirectory>
                                </configuration>
                            </execution>
                            <execution>
                                <id>copy-compose-resources</id>
                                <phase>process-resources</phase>
                                <goals>
                                    <goal>copy-resources</goal>
                                </goals>
                                <configuration>
                                    <resources>
                                        <resource>
                                            <directory>${project.basedir}/src/test/docker/${project.artifactId}</directory>
                                            <filtering>true</filtering>
                                        </resource>
                                    </resources>
                                    <outputDirectory>${project.build.directory}/compose-resources/${project.artifactId}</outputDirectory>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <groupId>io.fabric8</groupId>
                        <artifactId>docker-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>build-docker-image</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>build</goal>
                                </goals>
                                <configuration>
                                    <images>
                                        <image>
                                            <name>${docker.image.name}</name>
                                            <build>
                                                <dockerFileDir>${project.build.directory}/docker-resources
                                                </dockerFileDir>
                                                <tags>
                                                    <tag>${project.version}</tag>
                                                </tags>
                                            </build>
                                        </image>
                                    </images>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <groupId>group.msg.at.cloud.tools</groupId>
                        <artifactId>compose-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>start-docker-containers</id>
                                <phase>pre-integration-test</phase>
                                <goals>
                                    <goal>upWithLogs</goal>
                                </goals>
                                <configuration>
                                    <composeFile>
                                        ${project.build.directory}/compose-resources/${project.artifactId}/docker-compose.yml
                                    </composeFile>
                                </configuration>
                            </execution>
                            <execution>
                                <id>stop-docker-containers</id>
                                <phase>post-integration-test</phase>
                                <goals>
                                    <goal>down</goal>
                                </goals>
                                <configuration>
                                    <composeFile>
                                        ${project.build.directory}/compose-resources/${project.artifactId}/docker-compose.yml
                                    </composeFile>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-failsafe-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>run-system-tests</id>
                                <goals>
                                    <goal>integration-test</goal>
                                </goals>
                                <phase>integration-test</phase>
                                <configuration>
                                    <includes>
                                        <include>**/*SystemTest.java</include>
                                    </includes>
                                    <systemPropertyVariables>
                                        <test.target.route>${docker.test.target.route}</test.target.route>
                                    </systemPropertyVariables>
                                </configuration>
                            </execution>
                            <execution>
                                <id>verify-system-test-results</id>
                                <goals>
                                    <goal>verify</goal>
                                </goals>
                                <phase>verify</phase>
                                <configuration>
                                    <failIfNoTests>true</failIfNoTests>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                    <!-- quality assurance plugins -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-dependency-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>copy-jacoco-agent-to-docker-resources</id>
                                <goals>
                                    <goal>copy</goal>
                                </goals>
                                <phase>prepare-package</phase>
                                <configuration>
                                    <artifactItems>
                                        <artifactItem>
                                            <groupId>org.jacoco</groupId>
                                            <artifactId>org.jacoco.agent</artifactId>
                                            <version>${maven.jacoco.plugin.version}</version>
                                            <classifier>runtime</classifier>
                                        </artifactItem>
                                    </artifactItems>
                                    <stripClassifier>true</stripClassifier>
                                    <stripVersion>true</stripVersion>
                                    <outputDirectory>${project.build.directory}/docker-resources</outputDirectory>
                                </configuration>
                            </execution>
                            <execution>
                                <id>copy-payara-custom-libs</id>
                                <goals>
                                    <goal>copy</goal>
                                </goals>
                                <phase>prepare-package</phase>
                                <configuration>
                                    <artifactItems>
                                        <artifactItem>
                                            <groupId>group.msg.at.cloud</groupId>
                                            <artifactId>cnj-payara-opentracing-jaeger</artifactId>
                                            <version>${payara.opentracing.jaeger.version}</version>
                                        </artifactItem>
                                    </artifactItems>
                                    <stripClassifier>true</stripClassifier>
                                    <stripVersion>true</stripVersion>
                                    <outputDirectory>${project.build.directory}/docker-resources</outputDirectory>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <!-- profile commit-stage representing commit-stage of CI build -->
        <!-- builds application; runs unit tests on application; builds docker image; runs system tests on docker container; pushes docker image  -->
        <profile>
            <id>commit-stage</id>
            <build>
                <plugins>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-surefire-plugin</artifactId>
                        <configuration>
                            <excludes>
                                <exclude>**/*SystemTest.java</exclude>
                            </excludes>
                        </configuration>
                    </plugin>
                    <plugin>
                        <groupId>fish.payara.maven.plugins</groupId>
                        <artifactId>payara-micro-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <goals>
                                    <goal>bundle</goal>
                                </goals>
                                <phase>package</phase>
                            </execution>
                        </executions>
                        <configuration>
                            <payaraVersion>${payara.version}</payaraVersion>
                        </configuration>
                    </plugin>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-resources-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>copy-docker-resources</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>copy-resources</goal>
                                </goals>
                                <configuration>
                                    <resources>
                                        <resource>
                                            <directory>${project.basedir}/src/main/docker</directory>
                                            <filtering>true</filtering>
                                        </resource>
                                        <resource>
                                            <directory>${project.build.directory}</directory>
                                            <includes>
                                                <include>*-microbundle.jar</include>
                                            </includes>
                                        </resource>
                                    </resources>
                                    <outputDirectory>${project.build.directory}/docker-resources</outputDirectory>
                                </configuration>
                            </execution>
                            <execution>
                                <id>copy-compose-resources</id>
                                <phase>process-resources</phase>
                                <goals>
                                    <goal>copy-resources</goal>
                                </goals>
                                <configuration>
                                    <resources>
                                        <resource>
                                            <directory>${project.basedir}/src/test/docker/${project.artifactId}</directory>
                                            <filtering>true</filtering>
                                        </resource>
                                    </resources>
                                    <outputDirectory>${project.build.directory}/compose-resources/${project.artifactId}</outputDirectory>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <groupId>io.fabric8</groupId>
                        <artifactId>docker-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>build-docker-image</id>
                                <phase>package</phase>
                                <goals>
                                    <goal>build</goal>
                                </goals>
                                <configuration>
                                    <images>
                                        <image>
                                            <name>${docker.image.name}</name>
                                            <build>
                                                <dockerFileDir>${project.build.directory}/docker-resources
                                                </dockerFileDir>
                                                <tags>
                                                    <tag>${project.version}</tag>
                                                </tags>
                                            </build>
                                        </image>
                                    </images>
                                </configuration>
                            </execution>
                            <execution>
                                <id>push-docker-image</id>
                                <phase>install</phase>
                                <goals>
                                    <goal>push</goal>
                                </goals>
                                <configuration>
                                    <images>
                                        <image>
                                            <name>${docker.image.name}</name>
                                            <build>
                                                <dockerFileDir>${project.build.directory}/docker-resources</dockerFileDir>
                                                <tags>
                                                    <tag>${project.version}</tag>
                                                </tags>
                                            </build>
                                        </image>
                                    </images>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <groupId>group.msg.at.cloud.tools</groupId>
                        <artifactId>compose-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>start-docker-containers</id>
                                <phase>pre-integration-test</phase>
                                <goals>
                                    <goal>upWithLogs</goal>
                                </goals>
                                <configuration>
                                    <composeFile>
                                        ${project.build.directory}/compose-resources/${project.artifactId}/docker-compose.yml
                                    </composeFile>
                                </configuration>
                            </execution>
                            <execution>
                                <id>stop-docker-containers</id>
                                <phase>post-integration-test</phase>
                                <goals>
                                    <goal>down</goal>
                                </goals>
                                <configuration>
                                    <composeFile>
                                        ${project.build.directory}/compose-resources/${project.artifactId}/docker-compose.yml
                                    </composeFile>
                                    <removeVolumes>true</removeVolumes>
                                    <removeOrphans>true</removeOrphans>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-failsafe-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>run-system-tests</id>
                                <goals>
                                    <goal>integration-test</goal>
                                </goals>
                                <phase>integration-test</phase>
                                <configuration>
                                    <includes>
                                        <include>**/*SystemTest.java</include>
                                    </includes>
                                    <systemPropertyVariables>
                                        <test.target.route>${docker.test.target.route}</test.target.route>
                                    </systemPropertyVariables>
                                </configuration>
                            </execution>
                            <execution>
                                <id>verify-system-test-results</id>
                                <goals>
                                    <goal>verify</goal>
                                </goals>
                                <phase>verify</phase>
                                <configuration>
                                    <failIfNoTests>true</failIfNoTests>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                    <!-- quality assurance plugins -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-dependency-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>copy-jacoco-agent-to-docker-resources</id>
                                <goals>
                                    <goal>copy</goal>
                                </goals>
                                <phase>prepare-package</phase>
                                <configuration>
                                    <artifactItems>
                                        <artifactItem>
                                            <groupId>org.jacoco</groupId>
                                            <artifactId>org.jacoco.agent</artifactId>
                                            <version>${maven.jacoco.plugin.version}</version>
                                            <classifier>runtime</classifier>
                                        </artifactItem>
                                    </artifactItems>
                                    <stripClassifier>true</stripClassifier>
                                    <stripVersion>true</stripVersion>
                                    <outputDirectory>${project.build.directory}/docker-resources</outputDirectory>
                                </configuration>
                            </execution>
                            <execution>
                                <id>copy-payara-custom-libs</id>
                                <goals>
                                    <goal>copy</goal>
                                </goals>
                                <phase>prepare-package</phase>
                                <configuration>
                                    <artifactItems>
                                        <artifactItem>
                                            <groupId>group.msg.at.cloud</groupId>
                                            <artifactId>cnj-payara-opentracing-jaeger</artifactId>
                                            <version>${payara.opentracing.jaeger.version}</version>
                                        </artifactItem>
                                    </artifactItems>
                                    <stripClassifier>true</stripClassifier>
                                    <stripVersion>true</stripVersion>
                                    <outputDirectory>${project.build.directory}/docker-resources</outputDirectory>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
        <!-- profile integration-test-stage representing integration-test-stage of CI build -->
        <!-- deploys Helm release to integration test environment on Kubernetes, runs system tests and deletes the Helm release -->
        <profile>
            <id>integration-test-stage</id>
            <properties>
                <k8s.cluster.namespace>cloudtrain-int</k8s.cluster.namespace>
                <test.target.route>${k8s.test.target.route}</test.target.route>
                <maven.install.skip>true</maven.install.skip>
            </properties>
            <build>
                <plugins>
                    <!-- skip unit tests, since we are working with an already built artifact -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-surefire-plugin</artifactId>
                        <configuration>
                            <skip>true</skip>
                        </configuration>
                    </plugin>
                    <!-- skip WAR packaging, since we are working with an already built artifact -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-war-plugin</artifactId>
                        <configuration>
                            <skip>true</skip>
                        </configuration>
                    </plugin>
                    <!-- copy resources for helm deployment applying filtering -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-resources-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>copy-helm-resources</id>
                                <phase>process-resources</phase>
                                <goals>
                                    <goal>copy-resources</goal>
                                </goals>
                                <configuration>
                                    <resources>
                                        <resource>
                                            <directory>${project.basedir}/src/main/helm/${project.artifactId}</directory>
                                            <filtering>true</filtering>
                                        </resource>
                                    </resources>
                                    <outputDirectory>${project.build.directory}/helm-resources/${project.artifactId}</outputDirectory>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                    <!-- install/upgrade helm release before running tests; delete helm release after running tests -->
                    <plugin>
                        <groupId>group.msg.at.cloud.tools</groupId>
                        <artifactId>helm-maven-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>helm-install</id>
                                <phase>pre-integration-test</phase>
                                <goals>
                                    <goal>deploy</goal>
                                </goals>
                                <configuration>
                                    <chartDirectory>${project.build.directory}/helm-resources/${project.artifactId}</chartDirectory>
                                    <releaseName>${project.artifactId}</releaseName>
                                    <namespace>${k8s.cluster.namespace}</namespace>
                                    <debug>true</debug>
                                    <timeout>90s</timeout>
                                </configuration>
                            </execution>
                            <!--
                                                        <execution>
                                                            <id>helm-delete</id>
                                                            <phase>post-integration-test</phase>
                                                            <goals>
                                                                <goal>uninstall</goal>
                                                            </goals>
                                                            <configuration>
                                                                <releaseName>${project.artifactId}</releaseName>
                                                                <namespace>${k8s.cluster.namespace}</namespace>
                                                                <debug>true</debug>
                                                            </configuration>
                                                        </execution>
                            -->
                        </executions>
                    </plugin>
                    <!-- run system tests on installed helm release -->
                    <plugin>
                        <groupId>org.apache.maven.plugins</groupId>
                        <artifactId>maven-failsafe-plugin</artifactId>
                        <executions>
                            <execution>
                                <id>run-system-tests</id>
                                <goals>
                                    <goal>integration-test</goal>
                                </goals>
                                <phase>integration-test</phase>
                                <configuration>
                                    <includes>
                                        <include>**/*SystemTest.java</include>
                                    </includes>
                                    <systemPropertyVariables>
                                        <test.target.route>${k8s.test.target.route}</test.target.route>
                                        <test.target.readinessProbe.initialDelaySeconds>0</test.target.readinessProbe.initialDelaySeconds>
                                    </systemPropertyVariables>
                                </configuration>
                            </execution>
                            <execution>
                                <id>verify-system-test-results</id>
                                <goals>
                                    <goal>verify</goal>
                                </goals>
                                <phase>verify</phase>
                                <configuration>
                                    <failIfNoTests>true</failIfNoTests>
                                </configuration>
                            </execution>
                        </executions>
                    </plugin>
                </plugins>
            </build>
        </profile>
    </profiles>
    <distributionManagement>
        <repository>
            <id>cloudtrain-maven-repository</id>
            <name>msg Automotive CloudTrain Releases Repository</name>
            <url>https://nexus.cloudtrain.aws.msgoat.eu/repository/cloudtrain-releases/</url>
        </repository>
    </distributionManagement>
</project>
